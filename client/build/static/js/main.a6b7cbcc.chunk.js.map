{"version":3,"sources":["components/Todo/index.tsx","utils/API.ts","components/InputTodo/index.tsx","components/Filter/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todo","todo","todo_id","name","description","API","test","a","axios","get","getAllTodos","postNewTodo","data","post","InputTodo","useState","tags","inputsTodo","setInputsTodo","handleInput","evt","currentTarget","value","htmlFor","onChange","type","id","toString","onClick","preventDefault","tagsArr","replace","split","newTodo","console","log","then","res","catch","err","Filter","inputs","setInputs","placeholder","data-testid","target","App","todos","setTodos","useEffect","rows","className","map","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAkBeA,EAVe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/B,OACE,gCACE,8BAAMA,EAAKC,UACX,8BAAMD,EAAKE,OACX,8BAAMF,EAAKG,kB,qDCHFC,EANH,CACVC,KAAK,WAAD,4BAAE,sBAAAC,EAAA,sEAAkBC,IAAMC,IAAI,MAA5B,mFAAF,kDAAC,GACLC,YAAY,WAAD,4BAAE,sBAAAH,EAAA,sEAAkBC,IAAMC,IAAI,WAA5B,mFAAF,kDAAC,GACZE,YAAY,WAAD,4BAAE,WAAOC,GAAP,SAAAL,EAAA,sEAAmCC,IAAMK,KAAK,UAAWD,GAAzD,mFAAF,mDAAC,ICgDCE,EA3Ca,WAAO,IAAD,EACIC,mBAAyB,CAC3DZ,KAAM,GACNC,YAAa,GACbY,KAAM,KAJwB,mBACzBC,EADyB,KACbC,EADa,KAO1BC,EAAc,SAACC,GAA8C,IAAD,EAC1CA,EAAIC,cAAnBlB,EADyD,EACzDA,KAAMmB,EADmD,EACnDA,MACbJ,EAAc,2BACTD,GADQ,kBAEVd,EAAOmB,MAiBZ,OACE,8BACE,iCACE,uBAAOC,QAAQ,kBAAf,mBACA,uBAAOC,SAAUL,EAAahB,KAAM,OAAQmB,MAAOL,EAAWd,KAAMsB,KAAK,OAAOC,GAAG,oBACnF,uBAAOH,QAAQ,yBAAf,0BACA,uBAAOC,SAAUL,EAAahB,KAAM,cAAemB,MAAOL,EAAWb,YAAaqB,KAAK,OAAOC,GAAG,2BACjG,uBAAOH,QAAQ,kBAAf,mBACA,uBAAOC,SAAUL,EAAahB,KAAM,OAAQmB,MAAOL,EAAWD,KAAKW,WAAYF,KAAK,OAAOC,GAAG,oBAC9F,wBAAQE,QAtBK,SAACR,GAClBA,EAAIS,iBACJ,IAAMC,EAAUb,EAAWD,KAAKe,QAAQ,IAAK,IAAIC,MAAM,KACjDC,EAAoB,2BACrBhB,GADqB,IAExBD,KAAMc,IAERI,QAAQC,IAAIF,GACZ5B,EAAIM,YAAYsB,GACbG,MAAK,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,MACxBC,OAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,OAYxB,+BChBOC,EA3BU,WAAO,IAAD,EACDzB,mBAAiB,CAC3CC,KAAM,KAFqB,mBACtByB,EADsB,KACdC,EADc,KAa7B,OACE,8BACE,uBACEjB,KAAK,OACLtB,KAAK,OACLwC,YAAY,aACZC,cAAY,cACZtB,MAAOmB,EAAOzB,KACdQ,SAhBe,SAACJ,GAAc,IAAD,EACTA,EAAIyB,OAApB1C,EADyB,EACzBA,KAAMmB,EADmB,EACnBA,MACdoB,EAAU,2BACLD,GADI,kBAENtC,EAAOmB,WCqBCwB,EA1BO,WAAO,IAAD,EACA/B,mBAAqB,IADrB,mBACnBgC,EADmB,KACZC,EADY,KAa1B,OAVAC,qBAAU,WACR5C,EAAIK,cACD0B,MAAK,SAACC,GACLH,QAAQC,IAAIE,GACZ,IAAMa,EAAmBb,EAAIzB,KAAKsC,KAClCF,EAASE,MAEVZ,OAAM,SAACC,GAAD,OAASL,QAAQC,IAAII,QAC7B,IAGD,sBAAKY,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,qBAAKA,UAAU,iBAAf,SACGJ,EAAMK,KAAI,SAACC,GACV,OAAO,cAAC,EAAD,CAAMpD,KAAMoD,GAAQA,EAAEnD,kBCfxBoD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a6b7cbcc.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { TodoType } from \"./Todo.d\";\n\ntype Props = {\n  todo: TodoType;\n};\n\nconst Todo: React.FC<Props> = ({ todo }) => {\n  return (\n    <div>\n      <div>{todo.todo_id}</div>\n      <div>{todo.name}</div>\n      <div>{todo.description}</div>\n    </div>\n  );\n};\n\nexport default Todo;\n","import axios from \"axios\";\n\nimport { NewTodoType } from \"../components/InputTodo/InputTodo.d\";\n\nconst API = {\n  test: async () => await axios.get(\"/_\"),\n  getAllTodos: async () => await axios.get(\"/_todos\"),\n  postNewTodo: async (data: NewTodoType) => await axios.post(\"/_todos\", data),\n};\n\nexport default API;\n","import React, {useState} from \"react\";\n\nimport {NewTodoType} from './InputTodo.d';\n\nimport API from '../../utils/API';\n\ntype InputsTodoType = {\n  name: string,\n  description: string,\n  tags: string\n}\n\nconst InputTodo: React.FC = () => {\n  const [inputsTodo, setInputsTodo] = useState<InputsTodoType>({\n    name: '',\n    description: '',\n    tags: ''\n  });\n\n  const handleInput = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {name, value} = evt.currentTarget;\n    setInputsTodo({\n      ...inputsTodo,\n      [name]: value\n    });\n  }\n\n  const submitTodo = (evt: React.MouseEvent) => {\n    evt.preventDefault();\n    const tagsArr = inputsTodo.tags.replace(' ', '').split(',');\n    const newTodo: NewTodoType = {\n      ...inputsTodo,\n      tags: tagsArr\n    }\n    console.log(newTodo);\n    API.postNewTodo(newTodo)\n      .then(res => console.log(res))\n      .catch(err => console.log(err));\n  }\n\n  return (\n    <div>\n      <form>\n        <label htmlFor=\"todo-name-input\">Name:</label>\n        <input onChange={handleInput} name={'name'} value={inputsTodo.name} type=\"text\" id=\"todo-name-input\" />\n        <label htmlFor=\"todo-description-input\">Description:</label>\n        <input onChange={handleInput} name={'description'} value={inputsTodo.description} type=\"text\" id=\"todo-description-input\" />\n        <label htmlFor=\"todo-tags-input\">Tags:</label>\n        <input onChange={handleInput} name={'tags'} value={inputsTodo.tags.toString()} type=\"text\" id=\"todo-tags-input\" />\n        <button onClick={submitTodo}>Submit Todo</button>\n      </form>\n    </div>\n  );\n};\n\nexport default InputTodo;\n","import React, { useState } from \"react\";\n\ntype Inputs = {\n  tags: string;\n};\n\nconst Filter: React.FC = () => {\n  const [inputs, setInputs] = useState<Inputs>({\n    tags: \"\",\n  });\n\n  const handleChange = (evt: any) => {\n    const { name, value } = evt.target;\n    setInputs({\n      ...inputs,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name=\"tags\"\n        placeholder=\"Tag1, Tag2\"\n        data-testid=\"filter-tags\"\n        value={inputs.tags}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nimport Todo from \"./components/Todo\";\nimport { TodoType } from \"./components/Todo/Todo.d\";\nimport InputTodo from \"./components/InputTodo\";\nimport Filter from \"./components/Filter\";\n\nimport API from \"./utils/API\";\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<TodoType[]>([]);\n\n  useEffect(() => {\n    API.getAllTodos()\n      .then((res) => {\n        console.log(res);\n        const rows: TodoType[] = res.data.rows;\n        setTodos(rows);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <InputTodo />\n      <Filter />\n      <div className=\"todo-container\">\n        {todos.map((e: TodoType) => {\n          return <Todo todo={e} key={e.todo_id} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}